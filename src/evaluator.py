from langchain_core.prompts import PromptTemplate
from langchain.schema import HumanMessage
from langchain_openai import ChatOpenAI

EVALUATE_PROMPT = """Ты - эксперт в области обработки текста. Твоя задача – оценить предоставленный итоговый отчёт (буллет-поинты) и сравнить его с идеальным ответом. Тебе нужно определить, есть ли избыточная или фальшивая информация в предоставленном отчёте по сравнению с идеальным ответом.

Инструкции:
1. Прочитай предоставленный итоговый отчёт и идеальный ответ.
2. Сравни пункты в предоставленном отчёте с идеальным ответом.
3. Определи, есть ли в предоставленном отчёте пункты, которые не соответствуют идеальному ответу (избыточная информация) или не включены в идеальный ответ (фальшивая информация).
4. Перечисли найденные избыточные и фальшивые пункты.

Структура ответа:
"
Избыточная информация:
- Пункт 1
- Пункт 2...

Фальшивая информация:
- Пункт 1
- Пункт 2...
"

Пример ответа:
"
Избыточная информация:
- задача B завершена на 80% (в идеальном ответе нет этого пункта)
- проведена встреча с новым клиентом Z (в идеальном ответе нет этого пункта)

Фальшивая информация:
- утвержден бюджет на следующий квартал (в идеальном ответе не обсуждался бюджет)
- назначен новый руководитель проекта (в идеальном ответе нет информации о назначении)
"

Идеальный ответ:
"
{gold}
"

Предоставленный итоговый отчёт:
"
{docs}
"

Оценка (без кавычек):
"""

IDEAL_SUMMARY = """
История Павла Дурова
- Родился в 1984 году в СССР.
- В детстве жил в Италии, вернулся в Россию после распада СССР.
- Учился в экспериментальной школе, изучал иностранные языки и математику.
- Вместе с братом увлекался программированием и дизайном.

VK и первые проблемы с властями
- Основал VK (русский аналог Facebook) в 21 год.
- VK стал крупнейшей социальной сетью в России и странах СНГ.
- Столкнулся с давлением со стороны российского правительства из-за отказа цензурировать оппозиционные группы.
- В 2013 году продал свою долю в VK и уехал из России, отказавшись выполнять требования властей.

Создание и развитие Telegram
- Идея создания Telegram возникла из-за необходимости безопасной связи.
- Брат Павла разработал стандарты шифрования для Telegram.
- Пробовал основать компанию в разных странах (Берлин, Лондон, Сингапур, Сан-Франциско), но из-за бюрократических препятствий везде, кроме Дубая, не удалось.
- В Дубае удобные условия для ведения бизнеса, нанимают сотрудников из любой точки мира, отсутствие давления со стороны правительства.
- Telegram стал популярным благодаря органическому росту и отсутствию затрат на рекламу.
- Основная миссия Telegram – защита свободы слова и личного пространства пользователей.

Конфликты с правительствами и крупными корпорациями
- Telegram часто получает запросы от различных правительств на раскрытие данных пользователей, особенно в случаях протестов и политической активности.
- Основное давление исходит от Apple и Google, которые могут удалить Telegram из своих магазинов за нарушение их правил.
- Компания избегает сотрудничества с властями для обеспечения нейтральности и независимости.

Личная жизнь и философия
- Павел Дуров владеет 100% Telegram и избегает венчурных инвестиций для сохранения независимости.
- Не имеет больших активов (недвижимости, самолетов, яхт) для поддержания своей свободы.
- Фокусируется на развитии компании и инновациях, считает, что человечеству нужна нейтральная платформа для обмена мнениями.

Будущее и инновации
- Оптимистично настроен на будущее личного пространства и конфиденциальности.
- Верит, что будут созданы новые безопасные устройства для связи.
- Наблюдает за изменениями в индустрии, приветствует инновации, такие как действия Илона Маска с Twitter.
- Считает, что необходимы платформы, которые уважают личное пространство и свободу слова.
"""

# to-do config


class Evaluator:
    def __init__(self):
        self.llm = ChatOpenAI(temperature=0)

    def evaluate(
        self, generated_summary: str, ideal_summary: str = IDEAL_SUMMARY
    ) -> str:
        evaluation_template = EVALUATE_PROMPT
        evaluation_prompt = PromptTemplate.from_template(evaluation_template)
        evaluation_message = HumanMessage(
            content=evaluation_prompt.format(docs=generated_summary, gold=ideal_summary)
        )
        return self.llm.invoke([evaluation_message]).content
